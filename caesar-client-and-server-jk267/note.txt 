1. client sends an integer n in the range of 1-25.
2. the server replies with the same number
3. for any other lines of text the client sends, the server rotates the characters in those lines of text n positions and return result
4. if the initial integer is not in the range of 1 to 25, the server sends an error messege
note: this assignment's version only supports alphabetic characters( a-z, and A-Z).
note: note that the lower-case letters stay lower-case letters and upper-case letters stay upper-case letters -- 
i.e., you do not rotate a lower-case letter into an upper-case letter, or vice versa.
note : Note also that if we view this service as a function, one session can serve as the inverse of another session if the first session 
uses n for its rotation amount and the second session uses 26-n for its rotation amount. Your service should thus be able to both encode and decode messages using the Caesar Cipher.



tips: 

Tips
Begin by writing a client that works correctly with my server.
When your client is working correctly, write a simple echo server that echoes back to the client whatever it sends.
Make your echo server multithreaded, so that it can handle multiple connections simultaneously.
Modify your multithreaded echo server so that when the first string 
it receives is n, it rotates the chars in all subsequent strings it
 receives before sending them back to the client. From there, it should be easy to complete all remaining requirements.


hints :

For the client side, I used these Java classes:
Socket (and SocketException)
DataOutputStream
writeBytes() to write out to the stream.
BufferedReader
readLine() method: to read from socket and standard input (System.in). 
Note that it removes any newlines at the end of the string, and returns null if the socket was closed.
InputStreamReader
IOException and UnknownHostException.
For the server side, I used these Java classes:
Most of the above, plus...
Date, DateFormat, SimpleDateFormat
ServerSocket
I used (int) 'a' (e.g.) to convert a character to its corresponding integer, and (char) anInt to do the reverse.